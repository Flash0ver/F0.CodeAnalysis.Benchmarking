using System.Collections.Immutable;
using System.Diagnostics;
using System.Runtime.CompilerServices;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp;
using Microsoft.CodeAnalysis.CSharp.Syntax;

namespace F0.CodeAnalysis.CSharp.Examples.Benchmarking;

[Generator(LanguageNames.CSharp)]
internal sealed class CSharpIncrementalGenerator : IIncrementalGenerator
{
	internal const string CSharp10 = @"// <auto-generated/>
#nullable enable

namespace MyNamespace;

public class MyClass
{
}

public struct MyStruct
{
}
";

	internal const string CSharp8 = @"// <auto-generated/>
#nullable enable

namespace MyNamespace
{
	public class MyClass
	{
	}

	public struct MyStruct
	{
	}
}
";

	internal const string CSharp7_3 = @"// <auto-generated/>
#nullable enable

namespace MyNamespace
{
	public class MyClass
	{
	}

	public struct MyStruct
	{
	}
}
";

	public void Initialize(IncrementalGeneratorInitializationContext context)
	{
		IncrementalValuesProvider<SyntaxNode> syntaxProvider = context.SyntaxProvider
			.CreateSyntaxProvider(SyntaxProviderPredicate, SyntaxProviderTransform);

		IncrementalValueProvider<(ImmutableArray<SyntaxNode> Nodes, ParseOptions ParseOptions)> source =
			syntaxProvider.Collect().Combine(context.ParseOptionsProvider);

		context.RegisterSourceOutput(source, Execute);
	}

	private bool SyntaxProviderPredicate(SyntaxNode syntaxNode, CancellationToken cancellationToken)
		=> syntaxNode is ClassDeclarationSyntax;

	private SyntaxNode SyntaxProviderTransform(GeneratorSyntaxContext context, CancellationToken cancellationToken)
	{
		Debug.Assert(context.Node is ClassDeclarationSyntax);
		return context.Node;
	}

	private void Execute(SourceProductionContext context, (ImmutableArray<SyntaxNode> Nodes, ParseOptions ParseOptions) source)
	{
		Debug.Assert(source.ParseOptions is CSharpParseOptions);
		var parseOptions = Unsafe.As<CSharpParseOptions>(source.ParseOptions);

		string generated = parseOptions.LanguageVersion switch
		{
			<= LanguageVersion.CSharp7_3 => CSharp7_3,
			> LanguageVersion.CSharp7_3 and < LanguageVersion.CSharp10 => CSharp8,
			>= LanguageVersion.CSharp10 => CSharp10,
		};

		string additional = $"// # of classes: {source.Nodes.Length}";

		context.AddSource($"{parseOptions.LanguageVersion}.g.cs", generated);
		context.AddSource("Additional.g.cs", additional);
	}
}
