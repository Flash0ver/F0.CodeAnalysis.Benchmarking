using System.Diagnostics;
using System.Runtime.CompilerServices;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp;
using Microsoft.CodeAnalysis.CSharp.Syntax;

namespace F0.CodeAnalysis.CSharp.Examples.Benchmarking;

[Generator(LanguageNames.CSharp)]
internal sealed class CSharpSourceGenerator : ISourceGenerator
{
	internal const string CSharp10 = @"// <auto-generated/>
#nullable enable

namespace MyNamespace;

public class MyClass
{
}

public struct MyStruct
{
}
";

	internal const string CSharp8 = @"// <auto-generated/>
#nullable enable

namespace MyNamespace
{
	public class MyClass
	{
	}

	public struct MyStruct
	{
	}
}
";

	internal const string CSharp7_3 = @"// <auto-generated/>
#nullable enable

namespace MyNamespace
{
	public class MyClass
	{
	}

	public struct MyStruct
	{
	}
}
";

	public void Initialize(GeneratorInitializationContext context)
		=> context.RegisterForSyntaxNotifications(SyntaxReceiver.Create);

	public void Execute(GeneratorExecutionContext context)
	{
		Debug.Assert(context.SyntaxReceiver is SyntaxReceiver);
		Debug.Assert(context.SyntaxContextReceiver is null);
		var receiver = Unsafe.As<SyntaxReceiver>(context.SyntaxReceiver);

		Debug.Assert(context.ParseOptions is CSharpParseOptions);
		var parseOptions = Unsafe.As<CSharpParseOptions>(context.ParseOptions);

		string generated = parseOptions.LanguageVersion switch
		{
			<= LanguageVersion.CSharp7_3 => CSharp7_3,
			> LanguageVersion.CSharp7_3 and < LanguageVersion.CSharp10 => CSharp8,
			>= LanguageVersion.CSharp10 => CSharp10,
		};

		string additional = $"// # of classes: {receiver.Nodes.Count}";

		context.AddSource($"{parseOptions.LanguageVersion}.g.cs", generated);
		context.AddSource("Additional.g.cs", additional);
	}

	private sealed class SyntaxReceiver : ISyntaxReceiver
	{
		internal static ISyntaxReceiver Create()
			=> new SyntaxReceiver();

		private SyntaxReceiver()
		{
		}

		public List<SyntaxNode> Nodes { get; } = new();

		public void OnVisitSyntaxNode(SyntaxNode syntaxNode)
		{
			if (syntaxNode is ClassDeclarationSyntax)
			{
				Nodes.Add(syntaxNode);
			}
		}
	}
}
